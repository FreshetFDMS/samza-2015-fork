/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.samza.sql.data;

import org.apache.calcite.rel.type.RelDataType;
import org.apache.calcite.rel.type.RelDataTypeField;
import org.apache.samza.SamzaException;
import org.apache.samza.sql.api.data.Data;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

/**
 * Converts instances of {@link org.apache.samza.sql.api.data.Data} to
 * {@link Object} array to use with expression generated by Calcite.
 *
 * TODO: Implement support for map, array, multiset and nested struct. Also need proper type mapping mechanism.
 * TODO: Also for converting floats, decimals and double we can use scale and precision values fromData type.
 */
public class SamzaToCalciteDataConverter {

  /**
   * Converts a {@link Data} instance to an Object array.
   *
   * @param tuple   {@code Data} object instance
   * @param sqlType row type to convert to
   * @return object array corresponding to specified type
   */
  public static Object[] convert(Data tuple, RelDataType sqlType) {

    if (sqlType.isStruct()) {
      Object[] out = new Object[sqlType.getFieldCount()];

      for (RelDataTypeField field : sqlType.getFieldList()) {
        RelDataType fieldType = field.getType();

        // TODO: Implement support for maps, arrays and sets.
        if(isMap(sqlType) || isCollection(sqlType)) {
          throw new SamzaException(String.format("Unsupported SQL type %s", sqlType.toString()));
        }

        out[field.getIndex()] = convertPrimitive(tuple.getFieldData(field.getName()), fieldType);
      }
    } else if (!isMap(sqlType) && !isCollection(sqlType)) {
      return new Object[]{convertPrimitive(tuple, sqlType)};
    }


    throw new SamzaException(String.format("Unsupported SQL type %s", sqlType.toString()));
  }


  private static Object convertPrimitive(Data data, RelDataType type) {
    /* I hope that following this method instead of calling value.value() is better
    because we can catch any type mismatches. */
    switch (type.getSqlTypeName()) {
      case BOOLEAN:
        return data.booleanValue();
      case TINYINT:
      case SMALLINT:
      case INTEGER:
        return data.intValue();
      case BIGINT:
        return data.longValue();
      case REAL:
        return data.floatValue();
      case FLOAT:
      case DOUBLE:
        return data.doubleValue();
      case DATE:
        return new Date(data.longValue());
      case TIME:
        return new Time(data.longValue());
      case TIMESTAMP:
        return new Timestamp(data.longValue());
      case CHAR:
      case VARCHAR:
        return data.strValue();
      case BINARY:
      case VARBINARY:
        return data.bytesValue();
      case ANY:
        return data.value();
      case SYMBOL:
        return data.value();
      default:
        throw new SamzaException(String.format("Unsupported type %s", type.getSqlTypeName()));
    }
  }

  private static Object[] convertArray(Data data, RelDataType type){
    return null;
  }

  private static boolean isMap(RelDataType type) {
    return type.getKeyType() != null && type.getValueType() != null;
  }

  private static boolean isCollection(RelDataType type) {
    return type.getComponentType() != null;
  }
}
